---
import { Picture } from '@astrojs/image/components';
import Global from '@layouts/Global.astro';
import Map from '@components/Map/index.svelte';
import { CollectionEntry, getCollection, getEntryBySlug } from 'astro:content';
import { camelCaseString } from '@util/funcs';
import type { AstroComponentFactory } from 'astro/dist/runtime/server';
import type { slimmedCanals } from '@util/types';
export type Props = Record<string, never>;

const metaEntry = await getEntryBySlug('meta', 'site');
const { shortTitle } = metaEntry.data;
const pageTitle = 'Map';

const canals = await getCollection('canals');

const slimmedCanals: slimmedCanals = canals.map((canal) => {
	return {
		x: canal.data.x,
		y: canal.data.y,
		width: canal.data.width,
		height: canal.data.height,
		scale: canal.data.scale,
		stroke: canal.data.stroke,
		path: canal.data.path,
		name: canal.data.name,
		pathYAdjust: canal.data.pathYAdjust,
	};
});
const canalEntries: Array<{
	Content: AstroComponentFactory;
	image: string;
	name: string;
	camelCaseName: string;
}> = [];

const canalImages = await Astro.glob('../assets/canals/*.jpg');

for (let i = 0; i < canals.length; i++) {
	const canal = canals[i] as CollectionEntry<'canals'>;
	const { Content } = await canal.render();
	const camelCaseName = camelCaseString(canal.data.name);
	const canalImage = canalImages.find((image) => {
		return image.default.src.includes(camelCaseName);
	}) as Record<string, any>;

	canalEntries.push({
		Content,
		image: canalImage.default.src,
		name: canal.data.name,
		camelCaseName,
	});
}
---

<Global title={`${shortTitle} | ${pageTitle}`}>
	<Map canals={slimmedCanals} client:load />
	{
		canalEntries.map(({ Content, image, name, camelCaseName }) => (
			<>
				<div id={`canal_${camelCaseName}`} class="canal-content">
					<Content />
				</div>
				<div id={`canal_${camelCaseName}_image`} class="canal-content">
					<Picture
						src={image}
						widths={[200, 400, 800]}
						sizes="(max-width: 800px) 100vw, 800px"
						aspectRatio="1:1"
						quality={75}
						alt={name}
						fit="cover"
						position="center"
					/>
				</div>
			</>
		))
	}
</Global>

<style lang="scss">
	// Get around Astro-Svelte-SCSS bug
	@import 'leaflet/dist/leaflet';

	body {
		background: v.$color-map-bg;
	}
	.canal-content {
		display: none;
	}
</style>
