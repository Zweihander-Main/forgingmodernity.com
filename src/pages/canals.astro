---
import { Picture } from 'astro:assets';
import Global from '@layouts/Global.astro';
import Map from '@components/Map/index.svelte';
import { getCollection, getEntry } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { camelCaseString } from '@util/funcs';
import cssVars from '@styles/_jsalias.module.scss';
import type {
	slimCanals,
	canalContentDOMId,
	canalPictureDOMId,
} from '@util/types';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';
export type Props = Record<string, never>;

const metaEntry = await getEntry('meta', 'site');
const { shortTitle, canalsMapTitle, mapDescription } = metaEntry.data;

const canals = await getCollection('canals');

const slimmedCanals: slimCanals = canals.map((canal) => {
	return {
		x: canal.data.x,
		y: canal.data.y,
		width: canal.data.width,
		height: canal.data.height,
		scale: canal.data.scale,
		stroke: canal.data.stroke,
		path: canal.data.path,
		name: canal.data.name,
		pathYAdjust: canal.data.pathYAdjust,
	};
});

const canalEntries: Array<{
	Content: AstroComponentFactory;
	image: CollectionEntry<'canals'>['data']['image'];
	name: string;
	camelCaseName: string;
}> = [];

for (let i = 0; i < canals.length; i++) {
	const canal = canals[i] as CollectionEntry<'canals'>;
	const { Content } = await canal.render();
	const camelCaseName = camelCaseString(canal.data.name);
	canalEntries.push({
		Content,
		image: canal.data.image,
		name: canal.data.name,
		camelCaseName,
	});
}

const mediaLargeWidth = parseInt(cssVars.mediaDesktop, 10) + 1;
const mediaDesktopWidth = parseInt(cssVars.mediaDesktop, 10) + 1;
const mediaTabletWidth = parseInt(cssVars.mediaTablet, 10) + 1;
const canalImageSizes =
	`(min-width: ${mediaLargeWidth}) 40vw, ` +
	`(min-width: ${mediaDesktopWidth}) 45vw, ` +
	`(min-width: ${mediaTabletWidth}) 90vw, ` +
	'95vw';
---

<Global
	title={`${shortTitle} | ${canalsMapTitle}`}
	description={mapDescription}
>
	<Map canals={slimmedCanals} client:load />
	{
		canalEntries.map(({ Content, image, name, camelCaseName }) => {
			const contentID: canalContentDOMId = `canal_${camelCaseName}`;
			const pictureID: canalPictureDOMId = `canal_${camelCaseName}_image`;
			const fit = 'cover';
			const position = 'center';
			return (
				<>
					<div id={contentID} class="canal-content">
						<Content />
					</div>
					<div id={pictureID} class="canal-content">
						<Picture
							src={image}
							widths={[300, 600, 900]}
							sizes={canalImageSizes}
							quality={75}
							alt={name}
							{...(fit && { fit })}
							{...(position && { position })}
						/>
					</div>
				</>
			) as HTMLElement;
		})
	}
</Global>
<!-- TODO aspectRatio, fit, position -->
<!-- Switch whatever the Images in Content Collections says -- this is an image filepath -->
<style lang="scss">
	@use '~styles/_variables.scss' as v;

	body {
		background: v.$color-map-bg;
	}

	.canal-content {
		display: none;
	}
</style>
