---
import Cover from '@components/Cover/index.astro';
import PurchaseButton from '@components/Purchase/Button.astro';
import Review from '@components/Review/index.astro';
import MapLink from '@components/MapLink/index.astro';
import Endorsement from '@components/Endorsement/index.astro';
import Footer from '@components/Footer/index.astro';
import cssVars from '@styles/_jsalias.module.scss';
import type { CollectionEntry } from 'astro:content';

export interface Props {
	authorName: string;
	availableText: string;
	canalsMapTitle: string;
	bookInfo: CollectionEntry<'pages'>;
	reviewItems: Array<CollectionEntry<'reviews'>>;
	endorsementItems: Array<CollectionEntry<'endorsements'>>;
	footerItems: Array<CollectionEntry<'syndication'>>;
}

const {
	authorName,
	availableText,
	canalsMapTitle,
	bookInfo,
	reviewItems,
	endorsementItems,
	footerItems,
} = Astro.props;

const { Content: BookInfo } = await bookInfo.render();

const bookInfoColumnWidth = 13;
const bookCoverColumnWidth = 10;
const bookInfoGridGap = 8;
const overviewSideMargin = parseInt(cssVars.paddingWidthOverviewSides, 10);

const mediaXxlargeMinWidth = parseInt(cssVars.mediaXxlarge, 10) + 1;
const mediaXxlargeGutter = bookInfoGridGap / 2 + overviewSideMargin;
const mediaXlargeMinWidth = parseInt(cssVars.mediaXlarge, 10) + 1;
const mediaXlargeGutter = bookInfoGridGap * 0.7 + overviewSideMargin / 2;
const mediaLargeMinWidth = parseInt(cssVars.mediaLarge, 10) + 1;
const mediaLargeGutter = bookInfoGridGap / 2 + overviewSideMargin / 2;
const mediaDesktopMinWidth = parseInt(cssVars.mediaDesktop, 10) + 1;
const mediaDesktopCoverSize = (
	(bookCoverColumnWidth / (bookInfoColumnWidth + bookCoverColumnWidth)) *
	100
).toPrecision(4);
const mediaDesktopGutter = bookInfoGridGap / 4 + overviewSideMargin / 2;

const coverSizes =
	`(min-width: ${mediaXxlargeMinWidth}px) ` +
	`calc(${mediaDesktopCoverSize}vw - ${mediaXxlargeGutter}rem), ` +
	`(min-width: ${mediaXlargeMinWidth}px) ` +
	`calc(${mediaDesktopCoverSize}vw - ${mediaXlargeGutter}rem), ` +
	`(min-width: ${mediaLargeMinWidth}px) ` +
	`calc(${mediaDesktopCoverSize}vw - ${mediaLargeGutter}rem), ` +
	`(min-width: ${mediaDesktopMinWidth}px) ` +
	`calc(${mediaDesktopCoverSize}vw - ${mediaDesktopGutter}rem), ` +
	'100vw';
---

<section>
	<div class="bookinfo-container">
		<Cover sizes={coverSizes} />
		<article class="bookinfo-text">
			<BookInfo />
			<div class="purchase-container">
				<PurchaseButton
					iconPack="mdi"
					icon="cart"
					text={availableText}
				/>
			</div>
		</article>
	</div>
</section>
<section>
	<div class="reviews-container">
		{
			reviewItems.map(
				(review) => (<Review review={review} />) as HTMLElement
			)
		}
	</div>
</section>
<section class="maplink-container">
	<MapLink canalsMapTitle={canalsMapTitle} />
</section>
<section class="endorsement-container">
	{
		endorsementItems.map(
			(endorsement) =>
				(<Endorsement endorsement={endorsement} />) as HTMLElement
		)
	}
</section>
<Footer footerItems={footerItems} authorName={authorName} />
<style
	lang="scss"
	define:vars={{
		'book-info-column-width': `${bookInfoColumnWidth}fr`,
		'book-cover-column-width': `${bookCoverColumnWidth}fr`,
		'book-info-grid-gap': `${bookInfoGridGap}rem`,
	}}
>
	@use '~styles/_variables.scss' as v;
	@use '~styles/_mixins.scss' as m;

	section {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}

	.bookinfo-container {
		display: grid;
		grid-template-columns: 1fr;
		grid-template-rows: 1fr;
		margin: 3rem 0;

		@include m.media('>desktop') {
			margin: 6rem 0;
			grid-template-columns: var(--book-cover-column-width) var(
					--book-info-column-width
				);
			gap: calc(var(--book-info-grid-gap) / 2);
		}

		@include m.media('>large') {
			gap: calc(var(--book-info-grid-gap) * 0.7);
		}

		@include m.media('>xlarge') {
			gap: var(--book-info-grid-gap);
		}
	}

	.reviews-container {
		display: flex;
		flex-direction: column;
	}

	.endorsement-container {
		margin-bottom: 6rem;
		display: grid;
		grid-template-columns: 1fr;
		grid-template-rows: repeat(6, auto);
		grid-auto-flow: column;
		row-gap: 2.5rem;
		align-items: baseline;
		justify-items: center;

		@include m.media('>phone') {
			column-gap: calc(v.$padding-width-overview-sides / 4);
		}

		@include m.media('>desktop') {
			column-gap: calc(v.$padding-width-overview-sides / 2);
			grid-template-columns: 1fr 1fr;
			grid-template-rows: 1fr auto auto;
		}

		@include m.media('>xxlarge') {
			column-gap: v.$padding-width-overview-sides - 2rem;
		}
	}

	.bookinfo-text {
		:global(h2) {
			font-size: 2.3rem;
			margin-bottom: 0.5rem;
			line-height: 1;

			@include m.media('>phone') {
				font-size: 3rem;
			}

			@include m.media('>tablet') {
				margin-bottom: 0.5rem;
			}
		}

		:global(h3) {
			font-size: 1.4rem;
			margin-top: 0;
			margin-bottom: 0;
			line-height: 1;
			letter-spacing: 0.04em;
		}

		:global(h4) {
			font-size: 0.9rem;
			letter-spacing: 0.08em;

			:global(a) {
				text-underline-offset: 0.2em;
			}
		}

		:global(p) {
			@include m.media('>justify') {
				text-align: justify;
			}
		}
	}

	.purchase-container {
		display: flex;
		justify-content: right;
		align-items: center;
		margin: 3rem 0;
	}

	.reviewer {
		@include m.parchment-emphasis;
	}

	.review {
		@include m.media('>justify') {
			text-align: justify;
		}
	}
</style>
