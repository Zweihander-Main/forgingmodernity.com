---
import { getImage } from '@astrojs/image';
import cloudsImageFile from '@assets/hero/gainsborough_clouds.jpg';
import cathedralImageFile from '@assets/hero/canaletto_cathedral.png';
import cityImageFile from '@assets/hero/canaletto_city.png';
import riverImageFile from '@assets/hero/canaletto_river.png';
import shoreImageFile from '@assets/hero/canaletto_shore.png';
import manImageFile from '@assets/hero/man.png';

const clouds = await getImage({
	src: cloudsImageFile,
	alt: 'Clouds',
	width: 1500,
	format: 'avif', // TODO compat
});
const cathedral = await getImage({
	src: cathedralImageFile,
	alt: "St. Paul's Cathedral",
	width: 478.5,
	format: 'avif',
});
const city = await getImage({
	src: cityImageFile,
	alt: 'London',
	width: 1500,
	format: 'avif',
});
const river = await getImage({
	src: riverImageFile,
	alt: 'Thames River',
	width: 1500,
	format: 'avif',
});
const shore = await getImage({
	src: shoreImageFile,
	alt: 'London Shore',
	width: 1500,
	format: 'avif',
});
const man = await getImage({
	src: manImageFile,
	alt: 'Man Standing Before London',
	width: 450,
	format: 'avif',
});

export interface Props {
	title: string;
	subTitle: string;
}

const { title, subTitle } = Astro.props;
// TODO: Change images to jpg, optimize to 1500/3000/half width, do manual picture element, move to public
---

<div class="parallax-layer parallax-layer-0 parallax-layer-clouds">
	<img src={clouds.src} alt={clouds.alt} class="image-clouds" />
</div>
<div class="parallax-layer parallax-layer-1 parallax-layer-cathedral">
	<img src={cathedral.src} alt={cathedral.alt} />
</div>
<div class="parallax-layer parallax-layer-2">
	<img src={city.src} alt={city.alt} />
</div>
<div class="parallax-layer parallax-layer-3 parallax-layer-text">
	<div class="text-container">
		<h1>{title}</h1>
		<h2>{subTitle}</h2>
	</div>
</div>
<div class="parallax-layer parallax-layer-4">
	<img src={river.src} alt={river.alt} />
</div>
<div class="parallax-layer parallax-layer-5">
	<img src={shore.src} alt={shore.alt} />
</div>
<div class="parallax-layer parallax-layer-6 parallax-layer-man">
	<img src={man.src} alt={man.alt} />
</div>
<div class="parallax-layer parallax-layer-bottom"></div>

<style lang="scss">
	@use 'sass:math';

	.parallax-layer {
		position: absolute;
		top: 0;
		right: 0;
		left: 0;
		bottom: 0;

		img {
			display: block;
			position: absolute;
			bottom: v.$parallax-bottom;
			width: 101vw;
			left: -0.5vw;
			outline: none !important; /** Avoid extensions messing around */
		}
	}

	.parallax-layer-bottom {
		display: flex;
		flex-direction: column;
		justify-content: flex-end;
		top: auto;
		bottom: v.$parallax-bottom;
	}

	@keyframes huerotate {
		to {
			filter: hue-rotate(360deg);
		}
	}

	.parallax-layer-clouds {
		img {
			object-fit: cover;
			height: 100vmax;
			top: 0;
			animation: huerotate 10s infinite linear;
		}
	}

	.parallax-layer-cathedral {
		img {
			width: 31.9vw;
			left: 31.5vw;
		}
	}

	.parallax-layer-man {
		img {
			width: 30vw;
			left: -4vw;
			// Fix for layers splitting apart at the bottom
			transform: translateY(0.3vmin);
		}
	}

	.parallax-layer-text {
		width: 100%;
		height: 100%;
		display: grid;
		justify-content: center;
		align-content: center;
	}

	@keyframes fadeup {
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.text-container {
		position: relative;
		bottom: 100px;
		text-align: center;

		$shadow-param: 0 4px 7px v.$color-shadow-dark,
			0 0px 5px v.$color-shadow-dark;

		& > * {
			will-change: opacity, transform;
			opacity: 0;
			transform: translateY(20px);
			animation-duration: 1.5s;
			animation-timing-function: v.$transition-timing;
			animation-name: fadeup;
			animation-fill-mode: forwards;
		}
		h1 {
			font-size: 3rem;
			margin-bottom: 1rem;
			line-height: 1;
			@include m.text-stroke(
				v.$color-text-stroke-light,
				2px,
				$shadow-param
			);
			@include m.media('>phone') {
				font-size: 10vw;
				margin-bottom: 0;
			}
			@include m.media('>desktop') {
				font-size: 8.5vw;
				@include m.text-stroke(
					v.$color-text-stroke-light,
					3px,
					$shadow-param
				);
			}
		}

		h2 {
			letter-spacing: 0.02em;
			will-change: opacity, transform;
			opacity: 0;
			transform: translateY(20px);
			animation-delay: 0.4s;
			font-size: 1rem;
			margin: auto;
			max-width: 80vw;
			line-height: 1;
			@include m.text-stroke(
				v.$color-text-stroke-light,
				1px,
				$shadow-param
			);
			@include m.media('>phone') {
				font-size: 1.15rem;
			}
			@include m.media('>tablet') {
				font-size: 1.3rem;
			}
			@include m.media('>desktop') {
				margin: revert;
				font-size: 2.2vw;
				line-height: 0;
				@include m.text-stroke(
					v.$color-text-stroke-light,
					2px,
					$shadow-param
				);
			}
		}
	}

	$parallax-layers: 6;

	@for $i from 0 through $parallax-layers {
		$x: math.div($parallax-layers - $i, 2);
		.parallax-layer-#{$i} {
			transform: translateZ(#{(-100 * $x) + 1}px) scale($x + 1);
		}
	}
</style>
