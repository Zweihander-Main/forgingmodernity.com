---
import HeroImage from './HeroImage.astro';
import PlaceholderImage from '@components/PlaceholderImage/index.astro';
import cloudsImageFile from '@assets/hero/gainsborough_clouds.jpg';
import cathedralImageFile from '@assets/hero/canaletto_cathedral.png';
import cityImageFile from '@assets/hero/canaletto_city.png';
import riverImageFile from '@assets/hero/canaletto_river.png';
import shoreImageFile from '@assets/hero/canaletto_shore.png';
import manImageFile from '@assets/hero/man.png';

const cathedralWidth = 31.9;
const manWidth = 30;

export interface Props {
	title: string;
	subTitle: string;
}

const { title, subTitle } = Astro.props;
---

<script>
	const element: HTMLElement | null = document.getElementById(
		'clouds-for-hue-animation'
	);

	const FRAMES_TO_SKIP = 3;
	const TIME_TO_SKIP = 16 * FRAMES_TO_SKIP;
	let start: number, previousTimeStamp: number;
	let hue = 0;

	function step(timeStamp: number) {
		if (start === undefined) {
			start = timeStamp;
		}

		if (previousTimeStamp !== timeStamp) {
			if (hue > 360) {
				hue = 0;
			} else {
				hue += FRAMES_TO_SKIP;
			}
			(element as HTMLElement).style.filter = `hue-rotate(${hue}deg)`;
		}

		previousTimeStamp = timeStamp;
		setTimeout(() => {
			window.requestAnimationFrame(step);
		}, TIME_TO_SKIP);
	}

	function imgLoaded() {
		setTimeout(() => {
			if (element) {
				window.requestAnimationFrame(step);
			}
		}, 1500);
	}

	if (element) {
		if ((element as HTMLImageElement).complete) {
			imgLoaded();
		} else {
			element.addEventListener('load', imgLoaded);
		}
	}
</script>
<header>
	<div class="parallax-layer parallax-layer-0 parallax-layer-clouds">
		<PlaceholderImage
			publicSrc="/img/hero/gainsborough_clouds.jpg"
			src={cloudsImageFile}
			alt="Clouds in the style of Thomas Gainsborough"
			sizes="100vw"
			widths={[1500, 1024, 768, 480]}
			type="jpeg"
			placeholderSize={10}
			id="clouds-for-hue-animation"
		/>
	</div>
	<div class="parallax-layer parallax-layer-1 parallax-layer-cathedral">
		<HeroImage
			src={cathedralImageFile}
			alt="St. Peter's Cathedral by Canaletto"
			sizes={`${cathedralWidth}vw`}
			widths={[957, 613, 460, 327, 245, 154]}
			type="png"
		/>
	</div>
	<div class="parallax-layer parallax-layer-2 parallax-layer-city">
		<HeroImage
			src={cityImageFile}
			alt="Slice of London by Canaletto"
			sizes="100vw"
			widths={[1500, 1024, 768, 480]}
			type="png"
		/>
	</div>
	<div class="parallax-layer parallax-layer-3 parallax-layer-text">
		<div class="text-container">
			<h1>{title}</h1>
			<h2>{subTitle}</h2>
		</div>
	</div>
	<div class="parallax-layer parallax-layer-4 parallax-layer-river">
		<HeroImage
			src={riverImageFile}
			alt="Thames River by Canaletto"
			sizes="100vw"
			widths={[3000, 1920, 1440, 1024, 768, 480]}
			type="png"
		/>
	</div>
	<div class="parallax-layer parallax-layer-5 parallax-layer-shore">
		<HeroImage
			src={shoreImageFile}
			alt="Thames Shore by Canaletto"
			sizes="100vw"
			widths={[3000, 1920, 1440, 1024, 768, 480]}
			type="png"
		/>
	</div>
	<div class="parallax-layer parallax-layer-6 parallax-layer-man">
		<HeroImage
			src={manImageFile}
			alt="Man in top hat standing watching London"
			sizes={`${manWidth}vw`}
			widths={[900, 576, 432, 308, 231, 144]}
			type="png"
		/>
	</div>
	<div class="parallax-layer parallax-layer-bottom"></div>
</header>

<style
	lang="scss"
	define:vars={{
		'cathedral-width': `${cathedralWidth}vw`,
		'man-width': `${manWidth}vw`,
	}}
>
	@use 'sass:math';
	@use 'src/styles/_variables.scss' as v;
	@use 'src/styles/_mixins.scss' as m;

	header {
		display: contents;
	}

	.parallax-layer {
		position: absolute;
		inset: 0;

		img {
			display: block;
			position: absolute;
			bottom: v.$parallax-bottom;
			width: 101vw;
			height: auto;
			left: -0.5vw;
			outline: none !important; /** Avoid extensions messing around */
		}
	}

	.parallax-layer-bottom {
		display: flex;
		flex-direction: column;
		justify-content: flex-end;
		top: auto;
		bottom: v.$parallax-bottom;
	}

	$scale-parallax-mobile: 1.7;
	$scale-parallax-tablet: 1.5;

	.parallax-layer-clouds img {
		object-fit: cover;
		height: 100vmax;
		top: 0;
		will-change: filter;
		transform: translateZ(0);
		backface-visibility: hidden;
	}

	.parallax-layer-clouds svg {
		object-fit: cover;
		height: 100vmax;
		top: 0;
		transform: scale(1.1) !important;
		will-change: opacity;
	}

	.parallax-layer-cathedral img {
		width: var(--cathedral-width);
		left: 31.5vw;
		transform-origin: bottom;
		transform: scale($scale-parallax-mobile);

		@include m.media('>phone') {
			transform: scale($scale-parallax-tablet);
		}

		@include m.media('>tablet') {
			transform: none;
		}
	}

	.parallax-layer-city img {
		transform-origin: bottom;
		transform: scale($scale-parallax-mobile);

		@include m.media('>phone') {
			transform: scale($scale-parallax-tablet);
		}

		@include m.media('>tablet') {
			transform: none;
		}
	}

	.parallax-layer-river img {
		transform-origin: bottom;
		transform: scale($scale-parallax-mobile);

		@include m.media('>phone') {
			transform: scale($scale-parallax-tablet);
		}

		@include m.media('>tablet') {
			transform: none;
		}
	}

	.parallax-layer-shore img {
		transform-origin: bottom right;
		transform: scale($scale-parallax-mobile);

		@include m.media('>phone') {
			transform: scale($scale-parallax-tablet - 0.2);
		}

		@include m.media('>tablet') {
			transform: none;
		}
	}

	.parallax-layer-man img {
		width: var(--man-width);
		left: -4vw;
		transform-origin: bottom;
		transform: scale($scale-parallax-mobile) translateY(0.3vmin);

		@include m.media('>phone') {
			transform: scale($scale-parallax-tablet) translateY(0.3vmin);
		}

		@include m.media('>tablet') {
			/* Fix for layers splitting apart at the bottom */
			transform: translateY(0.3vmin);
		}
	}

	.parallax-layer-text {
		width: 100%;
		height: 100%;
		display: grid;
		place-content: center center;
	}

	@keyframes fade-up {
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.text-container {
		position: relative;
		bottom: 100px;
		text-align: center;

		/* stylelint-disable-next-line scss/dollar-variable-colon-space-after */
		$shadow-param:
			0 4px 7px v.$color-shadow-dark,
			0 0 5px v.$color-shadow-dark;

		& > * {
			will-change: opacity, transform;
			opacity: 0;
			transform: translateY(20px);
			animation-duration: 1.5s;
			animation-timing-function: v.$transition-timing;
			animation-name: fade-up;
			animation-fill-mode: forwards;
			animation-delay: 0.1s;
		}

		h1 {
			font-size: 3rem;
			margin-bottom: 1rem;
			line-height: 1;

			@include m.text-stroke(
				v.$color-text-stroke-light,
				2px,
				$shadow-param
			);

			@include m.media('>phone') {
				font-size: 10vw;
				margin-bottom: 0;
			}

			@include m.media('>desktop') {
				font-size: 8.5vw;

				@include m.text-stroke(
					v.$color-text-stroke-light,
					3px,
					$shadow-param
				);
			}
		}

		h2 {
			letter-spacing: 0.02em;
			will-change: opacity, transform;
			opacity: 0;
			transform: translateY(20px);
			animation-delay: 0.4s;
			font-size: 1rem;
			margin: auto;
			max-width: 80vw;
			line-height: 1;

			@include m.text-stroke(
				v.$color-text-stroke-light,
				1px,
				$shadow-param
			);

			@include m.media('>phone') {
				font-size: 1.15rem;
			}

			@include m.media('>tablet') {
				font-size: 1.3rem;
			}

			@include m.media('>desktop') {
				margin: revert;
				font-size: 2.2vw;
				line-height: 0;

				@include m.text-stroke(
					v.$color-text-stroke-light,
					2px,
					$shadow-param
				);
			}
		}
	}

	$parallax-layers: 6;

	@for $i from 0 through $parallax-layers {
		$x: math.div($parallax-layers - $i, 2);
		.parallax-layer-#{$i} {
			transform: translateZ(#{(-100 * $x) + 1}px) scale($x + 1);
		}
	}
</style>
