---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from '@util/types';
export interface Props {
	src: ImageMetadata;
	alt: string;
	sizes?: string;
	widths: number[];
	class?: string;
	type: 'jpeg' | 'png';
}

const {
	src,
	alt,
	sizes = '100vw',
	widths,
	class: className,
	type,
	...rest
} = Astro.props;

// const renderedPicObject = await getImage({
// 	src,
// 	widths,
// 	alt,
// 	formats: ['avif', 'webp', type],
// });
---

<Picture
	src={src}
	formats={['avif', 'webp', type]}
	alt={alt}
	loading="eager"
	decoding="sync"
	fetchpriority="high"
	class={className}
	sizes={sizes}
	widths={widths}
	{...rest}
/>
<!-- <picture>
	{
		renderedPicObject.sources.map(
			(source) =>
				(
					<source
						srcset={source.srcset}
						sizes={sizes}
						type={source.type}
					/>
				) as HTMLSourceElement
		)
	}
	<img
		src={renderedPicObject.image.src}
		loading="eager"
		decoding="sync"
		fetchpriority="high"
		class={className}
		alt={alt}
		width={src.width}
		height={src.height}
	/>
</picture> -->
