---
export interface Props {
	children: unknown;
}
---

<parallax-container class="parallax">
	<slot name="hero" />
	<div class="parallax-cover">
		<slot name="cover" />
	</div>
</parallax-container>

<script>
	class Parallax extends HTMLElement {
		constructor() {
			super();
			const storageItemName = 'scrollPos_' + document.location.pathname;
			const parallax = this;
			window.addEventListener('DOMContentLoaded', () => {
				const scrollPos = sessionStorage.getItem(storageItemName);
				if (scrollPos) {
					parallax.scrollTo(0, parseInt(scrollPos, 10));
					sessionStorage.removeItem(storageItemName);
				}
			});

			window.addEventListener('beforeunload', () => {
				sessionStorage.setItem(
					storageItemName,
					parallax.scrollTop.toString()
				);
			});
		}
	}

	customElements.define('parallax-container', Parallax);
</script>

<style lang="scss">
	@use 'src/styles/_variables.scss' as v;

	.parallax {
		perspective: 100px;
		height: 100vh;
		overflow: hidden auto;
		overscroll-behavior: auto none; /* Stop the bounce on mobile safari */
		position: absolute;
		inset: 0 0 0 50%;
		transform: translateX(-50%);
		width: 100%;
	}

	.parallax-cover {
		display: block;
		position: absolute;
		top: v.$parallax-cover-top;
		left: 0;
		right: 0;
		z-index: 2;
	}
</style>
